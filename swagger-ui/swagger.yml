openapi: 3.0.0

info:
  title: Todo API
  description: A sample API that uses a todo list
  version: 1.0.0

paths:
  /register:
    post:
      summary: Register a new user
      operationId: register
      tags:
        - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRead'
        '400':
          description: Invalid input, object invalid
        '409':
          description: An existing item already exists
  
  /login:
    post:
      summary: Login a user
      operationId: login
      tags:
        - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRead'
        '400':
          description: Invalid input, object invalid
        '401':
          description: Unauthorized
        '404':
          description: User not found
  
  /todos:
    get:
      summary: Get all todos
      operationId: getTodos
      tags:
        - todos
      responses:
        '200':
          description: Todos retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TodoRead'
        '401':
          description: Unauthorized
    post:
      summary: Create a new todo
      operationId: createTodo
      tags:
        - todos
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Todo'
      responses:
        '200':
          description: Todo created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoRead'
        '400':
          description: Invalid input, object invalid
        '401':
          description: Unauthorized
        '409':
          description: An existing item already exists
  
  /todos/{id}:
    get:
      summary: Get a todo by id
      operationId: getTodo
      tags:
        - todos
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: uuid
      responses:
        '200':
          description: Todo retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoRead'
        '401':
          description: Unauthorized
        '404':
          description: Todo not found
    put:
      summary: Update a todo by id
      operationId: updateTodo
      tags:
        - todos
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Todo'
      responses:
        '200':
          description: Todo updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoRead'
        '400':
          description: Invalid input, object invalid
        '401':
          description: Unauthorized
        '404':
          description: Todo not found
    delete:
      summary: Delete a todo by id
      operationId: deleteTodo
      tags:
        - todos
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: uuid
      responses:
        '200':
          description: Todo deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoRead'
        '401':
          description: Unauthorized
        '404':
          description: Todo not found

components:
  schemas:
    User:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    UserRead:
      type: object
      required:
        - username
      properties:
        id:
          type: uuid
        username:
          type: string
    Todo:
      type: object
      required:
        - title
      properties:
        title:
          type: string
        is_done:
          type: boolean
    TodoRead:
      type: object
      required:
        - title
      properties:
        id:
          type: uuid
        user_id:
          type: uuid
        title:
          type: string
        is_done:
          type: boolean
